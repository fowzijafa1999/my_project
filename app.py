{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7YmrAsjXbL7o"
      },
      "outputs": [],
      "source": [
        "# Ensures required packages are available in Colab\n",
        "!pip install -q pandas scikit-learn\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2) Imports\n",
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from IPython.display import HTML, display\n"
      ],
      "metadata": {
        "id": "0DM9R4-OhRZk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3) Hardcoded 30-product dataset (no CSV upload needed)\n",
        "data = [\n",
        "    [\"Laptop\", \"Electronics\", \"Dell\", \"High performance laptop for work\", \"https://upload.wikimedia.org/wikipedia/commons/3/3a/Laptop.png\"],\n",
        "    [\"Smartphone\", \"Electronics\", \"Samsung\", \"Latest Android smartphone\", \"https://upload.wikimedia.org/wikipedia/commons/3/3a/Smartphone.png\"],\n",
        "    [\"Headphones\", \"Electronics\", \"Sony\", \"Noise cancelling headphones\", \"https://upload.wikimedia.org/wikipedia/commons/3/3e/Headphones_Icon.svg\"],\n",
        "    [\"Smartwatch\", \"Electronics\", \"Apple\", \"Fitness tracking smartwatch\", \"https://upload.wikimedia.org/wikipedia/commons/0/0a/Smartwatch.png\"],\n",
        "    [\"Tablet\", \"Electronics\", \"Lenovo\", \"Portable tablet for entertainment\", \"https://upload.wikimedia.org/wikipedia/commons/4/42/Lenovo_Tablet.png\"],\n",
        "    [\"T-Shirt\", \"Clothing\", \"Nike\", \"Cotton casual t-shirt\", \"https://upload.wikimedia.org/wikipedia/commons/8/89/Tshirt.svg\"],\n",
        "    [\"Jeans\", \"Clothing\", \"Levis\", \"Denim jeans for everyday wear\", \"https://upload.wikimedia.org/wikipedia/commons/0/0b/Jeans_for_men.jpg\"],\n",
        "    [\"Jacket\", \"Clothing\", \"Adidas\", \"Winter jacket for cold weather\", \"https://upload.wikimedia.org/wikipedia/commons/0/0f/Jacket_black.jpg\"],\n",
        "    [\"Sneakers\", \"Footwear\", \"Puma\", \"Comfortable running sneakers\", \"https://upload.wikimedia.org/wikipedia/commons/8/89/Running_shoes.png\"],\n",
        "    [\"Formal Shoes\", \"Footwear\", \"Bata\", \"Leather formal shoes for office\", \"https://upload.wikimedia.org/wikipedia/commons/3/3e/Formal_shoes.png\"],\n",
        "    [\"Backpack\", \"Accessories\", \"Wildcraft\", \"Durable backpack for travel\", \"https://upload.wikimedia.org/wikipedia/commons/3/3c/Backpack.jpg\"],\n",
        "    [\"Sunglasses\", \"Accessories\", \"Ray-Ban\", \"Stylish sunglasses for outdoors\", \"https://upload.wikimedia.org/wikipedia/commons/3/3a/Sunglasses_icon.svg\"],\n",
        "    [\"Watch\", \"Accessories\", \"Fossil\", \"Analog wrist watch\", \"https://upload.wikimedia.org/wikipedia/commons/3/39/Wristwatch_icon.svg\"],\n",
        "    [\"Necklace\", \"Accessories\", \"Tanishq\", \"Gold necklace for women\", \"https://upload.wikimedia.org/wikipedia/commons/9/9f/Necklace.png\"],\n",
        "    [\"Handbag\", \"Accessories\", \"Gucci\", \"Designer leather handbag\", \"https://upload.wikimedia.org/wikipedia/commons/6/6c/Handbag.svg\"],\n",
        "    [\"Sofa\", \"Home\", \"Ikea\", \"Comfortable living room sofa\", \"https://upload.wikimedia.org/wikipedia/commons/2/25/Sofa_icon.svg\"],\n",
        "    [\"Chair\", \"Home\", \"Godrej\", \"Wooden chair for dining\", \"https://upload.wikimedia.org/wikipedia/commons/8/8e/Wooden_chair.png\"],\n",
        "    [\"Table\", \"Home\", \"Durian\", \"Study and work table\", \"https://upload.wikimedia.org/wikipedia/commons/1/1c/Table_icon.svg\"],\n",
        "    [\"Lamp\", \"Home\", \"Philips\", \"Bedside LED lamp\", \"https://upload.wikimedia.org/wikipedia/commons/2/2e/Lamp_icon.svg\"],\n",
        "    [\"Curtains\", \"Home\", \"HomeTown\", \"Decorative window curtains\", \"https://upload.wikimedia.org/wikipedia/commons/3/37/Curtains_icon.svg\"],\n",
        "    [\"Microwave\", \"Electronics\", \"LG\", \"Kitchen microwave oven\", \"https://upload.wikimedia.org/wikipedia/commons/0/0e/Microwave_icon.svg\"],\n",
        "    [\"Refrigerator\", \"Electronics\", \"Whirlpool\", \"Double door refrigerator\", \"https://upload.wikimedia.org/wikipedia/commons/2/2f/Refrigerator_icon.svg\"],\n",
        "    [\"Washing Machine\", \"Electronics\", \"Bosch\", \"Automatic washing machine\", \"https://upload.wikimedia.org/wikipedia/commons/1/15/Washing_machine_icon.svg\"],\n",
        "    [\"Mixer Grinder\", \"Electronics\", \"Preethi\", \"Multi-purpose kitchen grinder\", \"https://upload.wikimedia.org/wikipedia/commons/2/24/Mixer_grinder.png\"],\n",
        "    [\"Television\", \"Electronics\", \"Sony\", \"Smart LED television\", \"https://upload.wikimedia.org/wikipedia/commons/5/5e/Television.png\"],\n",
        "    [\"Sports Shoes\", \"Footwear\", \"Nike\", \"Shoes for running and training\", \"https://upload.wikimedia.org/wikipedia/commons/8/89/Running_shoes.png\"],\n",
        "    [\"Sandals\", \"Footwear\", \"Bata\", \"Comfortable leather sandals\", \"https://upload.wikimedia.org/wikipedia/commons/3/38/Sandals.jpg\"],\n",
        "    [\"Slippers\", \"Footwear\", \"Adidas\", \"Casual flip flop slippers\", \"https://upload.wikimedia.org/wikipedia/commons/d/d4/Slippers.png\"],\n",
        "    [\"Cap\", \"Accessories\", \"Adidas\", \"Casual baseball cap\", \"https://upload.wikimedia.org/wikipedia/commons/1/1f/Baseball_cap.png\"],\n",
        "    [\"Wallet\", \"Accessories\", \"Tommy Hilfiger\", \"Menâ€™s leather wallet\", \"https://upload.wikimedia.org/wikipedia/commons/7/7d/Wallet.png\"]\n",
        "]\n",
        "\n",
        "df = pd.DataFrame(data, columns=[\"Product\", \"Category\", \"Brand\", \"Description\", \"ImageURL\"])\n",
        "print(\"Dataset shape:\", df.shape)\n",
        "df.head(6)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "hOkjAu-SfCbW",
        "outputId": "a82e74c5-bf70-4fed-8bfd-3706755f1a81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset shape: (30, 5)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Product     Category    Brand                        Description  \\\n",
              "0      Laptop  Electronics     Dell   High performance laptop for work   \n",
              "1  Smartphone  Electronics  Samsung          Latest Android smartphone   \n",
              "2  Headphones  Electronics     Sony        Noise cancelling headphones   \n",
              "3  Smartwatch  Electronics    Apple        Fitness tracking smartwatch   \n",
              "4      Tablet  Electronics   Lenovo  Portable tablet for entertainment   \n",
              "5     T-Shirt     Clothing     Nike              Cotton casual t-shirt   \n",
              "\n",
              "                                            ImageURL  \n",
              "0  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "1  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "2  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "3  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "4  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "5  https://upload.wikimedia.org/wikipedia/commons...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b2c6a1dc-3f4d-4179-b8da-97bca0bd35d4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Category</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Description</th>\n",
              "      <th>ImageURL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Laptop</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Dell</td>\n",
              "      <td>High performance laptop for work</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Smartphone</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>Latest Android smartphone</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Headphones</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Sony</td>\n",
              "      <td>Noise cancelling headphones</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Smartwatch</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Apple</td>\n",
              "      <td>Fitness tracking smartwatch</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Tablet</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Lenovo</td>\n",
              "      <td>Portable tablet for entertainment</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>T-Shirt</td>\n",
              "      <td>Clothing</td>\n",
              "      <td>Nike</td>\n",
              "      <td>Cotton casual t-shirt</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2c6a1dc-3f4d-4179-b8da-97bca0bd35d4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b2c6a1dc-3f4d-4179-b8da-97bca0bd35d4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b2c6a1dc-3f4d-4179-b8da-97bca0bd35d4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a50be205-2113-49cb-87a2-5d03d8ad97d9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a50be205-2113-49cb-87a2-5d03d8ad97d9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a50be205-2113-49cb-87a2-5d03d8ad97d9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 30,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Slippers\",\n          \"Sofa\",\n          \"Mixer Grinder\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Clothing\",\n          \"Home\",\n          \"Footwear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"Puma\",\n          \"Godrej\",\n          \"Dell\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Casual flip flop slippers\",\n          \"Comfortable living room sofa\",\n          \"Multi-purpose kitchen grinder\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ImageURL\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"https://upload.wikimedia.org/wikipedia/commons/1/1f/Baseball_cap.png\",\n          \"https://upload.wikimedia.org/wikipedia/commons/8/8e/Wooden_chair.png\",\n          \"https://upload.wikimedia.org/wikipedia/commons/3/39/Wristwatch_icon.svg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4) Preview names (copy from here to avoid typos)\n",
        "df[\"Product\"].tolist()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5TWsYnjufaDf",
        "outputId": "17c625f5-fb1a-4bf7-f977-4fe5f0808d3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Laptop',\n",
              " 'Smartphone',\n",
              " 'Headphones',\n",
              " 'Smartwatch',\n",
              " 'Tablet',\n",
              " 'T-Shirt',\n",
              " 'Jeans',\n",
              " 'Jacket',\n",
              " 'Sneakers',\n",
              " 'Formal Shoes',\n",
              " 'Backpack',\n",
              " 'Sunglasses',\n",
              " 'Watch',\n",
              " 'Necklace',\n",
              " 'Handbag',\n",
              " 'Sofa',\n",
              " 'Chair',\n",
              " 'Table',\n",
              " 'Lamp',\n",
              " 'Curtains',\n",
              " 'Microwave',\n",
              " 'Refrigerator',\n",
              " 'Washing Machine',\n",
              " 'Mixer Grinder',\n",
              " 'Television',\n",
              " 'Sports Shoes',\n",
              " 'Sandals',\n",
              " 'Slippers',\n",
              " 'Cap',\n",
              " 'Wallet']"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 5) Build TF-IDF on combined text (category+brand+description)\n",
        "df[\"combined\"] = df[\"Category\"].astype(str) + \" \" + df[\"Brand\"].astype(str) + \" \" + df[\"Description\"].astype(str)\n",
        "\n",
        "vectorizer = TfidfVectorizer(stop_words=\"english\")\n",
        "tfidf_matrix = vectorizer.fit_transform(df[\"combined\"])\n",
        "\n",
        "cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n",
        "\n",
        "# mapping name->index for fast lookup (case-insensitive)\n",
        "name_to_idx = {n.lower(): i for i, n in enumerate(df[\"Product\"].tolist())}\n",
        "\n",
        "print(\"TF-IDF matrix shape:\", tfidf_matrix.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9_VbUCZGfman",
        "outputId": "fbba6918-814a-46a0-ad35-f4c0b85e786f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TF-IDF matrix shape: (30, 117)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 6) Recommendation function\n",
        "def recommend(product_name, top_n=5):\n",
        "    if not isinstance(product_name, str) or product_name.strip()==\"\":\n",
        "        raise ValueError(\"Enter a product name string.\")\n",
        "    key = product_name.lower()\n",
        "    if key not in name_to_idx:\n",
        "        return pd.DataFrame()  # empty DataFrame -> product not found\n",
        "    idx = name_to_idx[key]\n",
        "    scores = list(enumerate(cosine_sim[idx]))\n",
        "    scores = sorted(scores, key=lambda x: x[1], reverse=True)\n",
        "    top_indices = [i for i, s in scores[1: top_n+1]]  # skip itself (index 0)\n",
        "    return df.iloc[top_indices].reset_index(drop=True)\n"
      ],
      "metadata": {
        "id": "iId7ivfMhJhj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 7) Quick test: get table of top 5 recommendations for Laptop\n",
        "recs = recommend(\"Laptop\", top_n=5)\n",
        "recs[[\"Product\",\"Category\",\"Brand\",\"Description\",\"ImageURL\"]]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "HlqAAmMAhmE4",
        "outputId": "6849c025-10ab-4cc7-9cc2-23ff189e5f42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Product     Category    Brand                  Description  \\\n",
              "0       Table         Home   Durian         Study and work table   \n",
              "1  Television  Electronics     Sony         Smart LED television   \n",
              "2  Headphones  Electronics     Sony  Noise cancelling headphones   \n",
              "3   Microwave  Electronics       LG       Kitchen microwave oven   \n",
              "4  Smartphone  Electronics  Samsung    Latest Android smartphone   \n",
              "\n",
              "                                            ImageURL  \n",
              "0  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "1  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "2  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "3  https://upload.wikimedia.org/wikipedia/commons...  \n",
              "4  https://upload.wikimedia.org/wikipedia/commons...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5a248a3-f54e-4382-99b2-2123f06c3a93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Category</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Description</th>\n",
              "      <th>ImageURL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Table</td>\n",
              "      <td>Home</td>\n",
              "      <td>Durian</td>\n",
              "      <td>Study and work table</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Television</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Sony</td>\n",
              "      <td>Smart LED television</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Headphones</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Sony</td>\n",
              "      <td>Noise cancelling headphones</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Microwave</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>LG</td>\n",
              "      <td>Kitchen microwave oven</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Smartphone</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>Latest Android smartphone</td>\n",
              "      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5a248a3-f54e-4382-99b2-2123f06c3a93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5a248a3-f54e-4382-99b2-2123f06c3a93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5a248a3-f54e-4382-99b2-2123f06c3a93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ae257bdc-def7-47bf-89db-4eb9ad3c2130\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae257bdc-def7-47bf-89db-4eb9ad3c2130')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ae257bdc-def7-47bf-89db-4eb9ad3c2130 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"recs[[\\\"Product\\\",\\\"Category\\\",\\\"Brand\\\",\\\"Description\\\",\\\"ImageURL\\\"]]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Television\",\n          \"Smartphone\",\n          \"Headphones\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Electronics\",\n          \"Home\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Sony\",\n          \"Samsung\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Smart LED television\",\n          \"Latest Android smartphone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ImageURL\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"https://upload.wikimedia.org/wikipedia/commons/5/5e/Television.png\",\n          \"https://upload.wikimedia.org/wikipedia/commons/3/3a/Smartphone.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 8) Pretty display (images + info)\n",
        "def show_recommendations(product_name, top_n=5):\n",
        "    recs = recommend(product_name, top_n)\n",
        "    if recs.empty:\n",
        "        print(\"Product not found. Check spelling with df['Product'].tolist()\")\n",
        "        return\n",
        "    html = \"\"\n",
        "    for _, r in recs.iterrows():\n",
        "        html += f\"\"\"\n",
        "        <div style='display:inline-block; text-align:center; width:220px; margin:8px;'>\n",
        "          <img src=\"{r['ImageURL']}\" width=\"150\" style=\"border:1px solid #ddd;\"><br>\n",
        "          <b>{r['Product']}</b><br>\n",
        "          <small>{r['Category']} | {r['Brand']}</small><br>\n",
        "          <small style='color:#555'>{r['Description']}</small>\n",
        "        </div>\n",
        "        \"\"\"\n",
        "    display(HTML(html))\n",
        "\n",
        "# Example\n",
        "show_recommendations(\"Laptop\", 5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "id": "peteUleWhrYY",
        "outputId": "fbbcd049-598d-489b-c75e-955bbefd25cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "        <div style='display:inline-block; text-align:center; width:220px; margin:8px;'>\n",
              "          <img src=\"https://upload.wikimedia.org/wikipedia/commons/1/1c/Table_icon.svg\" width=\"150\" style=\"border:1px solid #ddd;\"><br>\n",
              "          <b>Table</b><br>\n",
              "          <small>Home | Durian</small><br>\n",
              "          <small style='color:#555'>Study and work table</small>\n",
              "        </div>\n",
              "        \n",
              "        <div style='display:inline-block; text-align:center; width:220px; margin:8px;'>\n",
              "          <img src=\"https://upload.wikimedia.org/wikipedia/commons/5/5e/Television.png\" width=\"150\" style=\"border:1px solid #ddd;\"><br>\n",
              "          <b>Television</b><br>\n",
              "          <small>Electronics | Sony</small><br>\n",
              "          <small style='color:#555'>Smart LED television</small>\n",
              "        </div>\n",
              "        \n",
              "        <div style='display:inline-block; text-align:center; width:220px; margin:8px;'>\n",
              "          <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3e/Headphones_Icon.svg\" width=\"150\" style=\"border:1px solid #ddd;\"><br>\n",
              "          <b>Headphones</b><br>\n",
              "          <small>Electronics | Sony</small><br>\n",
              "          <small style='color:#555'>Noise cancelling headphones</small>\n",
              "        </div>\n",
              "        \n",
              "        <div style='display:inline-block; text-align:center; width:220px; margin:8px;'>\n",
              "          <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0e/Microwave_icon.svg\" width=\"150\" style=\"border:1px solid #ddd;\"><br>\n",
              "          <b>Microwave</b><br>\n",
              "          <small>Electronics | LG</small><br>\n",
              "          <small style='color:#555'>Kitchen microwave oven</small>\n",
              "        </div>\n",
              "        \n",
              "        <div style='display:inline-block; text-align:center; width:220px; margin:8px;'>\n",
              "          <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3a/Smartphone.png\" width=\"150\" style=\"border:1px solid #ddd;\"><br>\n",
              "          <b>Smartphone</b><br>\n",
              "          <small>Electronics | Samsung</small><br>\n",
              "          <small style='color:#555'>Latest Android smartphone</small>\n",
              "        </div>\n",
              "        "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9) Interactive input during presentation\n",
        "product = input(\"Type product name (copy exactly from df['Product'].tolist()): \")\n",
        "show_recommendations(product, 5)\n"
      ],
      "metadata": {
        "id": "aOM-PCROiQIF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 10) Simple evaluation (proxy using category)\n",
        "def precision_at_k(seed_name, k=5):\n",
        "    recs = recommend(seed_name, top_n=k)\n",
        "    if recs.empty:\n",
        "        return None\n",
        "    seed_cat = df[df[\"Product\"].str.lower() == seed_name.lower()][\"Category\"].iloc[0]\n",
        "    relevant = sum(1 for c in recs[\"Category\"] if c == seed_cat)\n",
        "    return relevant / k\n",
        "\n",
        "# Show precision for a few seeds\n",
        "for s in [\"T-Shirt\", \"Laptop\", \"Sofa\"]:\n",
        "    print(s, \"Precision@5:\", precision_at_k(s,5))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_xKBdlZiqlT",
        "outputId": "0b6379f2-81d3-43aa-e456-213f5984a0a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T-Shirt Precision@5: 0.4\n",
            "Laptop Precision@5: 0.8\n",
            "Sofa Precision@5: 0.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 11) Optional: save dataset to CSV to download locally\n",
        "df.to_csv(\"products_dataset.csv\", index=False)\n",
        "from google.colab import files\n",
        "files.download(\"products_dataset.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "5kjg7rsKi4Op",
        "outputId": "bac07026-5690-494d-b8fe-2154a8f2200f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_aa92a402-10b5-40ee-af62-19aeb73b4f91\", \"products_dataset.csv\", 4964)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}